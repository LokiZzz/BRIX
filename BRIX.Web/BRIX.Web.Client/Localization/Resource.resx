<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Common_Language" xml:space="preserve">
    <value>Language</value>
  </data>
  <data name="Common_Characters" xml:space="preserve">
    <value>Characters</value>
  </data>
  <data name="Account_SignIn" xml:space="preserve">
    <value>Sign-in</value>
  </data>
  <data name="Account_Email" xml:space="preserve">
    <value>Email</value>
  </data>
  <data name="Account_Password" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="Account_SignInAction" xml:space="preserve">
    <value>Sign-in</value>
  </data>
  <data name="Account_ForgotPassword" xml:space="preserve">
    <value>Forgot password?</value>
  </data>
  <data name="Validation_EmailRequired" xml:space="preserve">
    <value>Email field is required.</value>
  </data>
  <data name="Validation_PasswordRequired" xml:space="preserve">
    <value>Password field is required.</value>
  </data>
  <data name="Validation_EmailFormat" xml:space="preserve">
    <value>Email format is invalid.</value>
  </data>
  <data name="Validation_PasswordConfirmCompare" xml:space="preserve">
    <value>The password and confirmation password do not match.</value>
  </data>
  <data name="Validation_PasswordLength" xml:space="preserve">
    <value>The password must be at least {2} and at max {1} characters long.</value>
  </data>
  <data name="Account_ConfirmedSuccessfully" xml:space="preserve">
    <value>Account confirmed successfully.</value>
  </data>
  <data name="Account_ConfirmFailed" xml:space="preserve">
    <value>Something goes wrong when trying to confirm account.</value>
  </data>
  <data name="Account_ConfirmPassword" xml:space="preserve">
    <value>Confirm password</value>
  </data>
  <data name="Account_SignUp" xml:space="preserve">
    <value>Sign-up</value>
  </data>
  <data name="Account_SignUpAction" xml:space="preserve">
    <value>Sign-up</value>
  </data>
  <data name="Account_ConfirmationEmailWasSent" xml:space="preserve">
    <value>An email has been sent to your email with a link to activate your account. Activate your account by clicking on the link in the email.</value>
  </data>
  <data name="Account_ResendConfirmationEmail" xml:space="preserve">
    <value>Resend confirmation email</value>
  </data>
  <data name="Account_IDidntRecieveEmail" xml:space="preserve">
    <value>I didn't receive email</value>
  </data>
  <data name="Account_ResendConfirmationEmailHint" xml:space="preserve">
    <value>Check the spam folder. Perhaps the email with the link to activate the account is there. If you still can't find the email, you can request a resend.</value>
  </data>
  <data name="Account_YouCanResendAfter" xml:space="preserve">
    <value>You can repeat the sending after {0} sec.</value>
  </data>
  <data name="Account_TooOftenResendRequest" xml:space="preserve">
    <value>You send account verification requests too often, wait a bit before making a new request.</value>
  </data>
  <data name="Account_ResendConfirmationSucceeded" xml:space="preserve">
    <value>The email with the account activation link has been successfully sent.</value>
  </data>
  <data name="Account_ChangePassword" xml:space="preserve">
    <value>Change password</value>
  </data>
  <data name="Account_ResetPassword" xml:space="preserve">
    <value>Reset password</value>
  </data>
  <data name="Account_ForgotPasswordRequestSuccseeded" xml:space="preserve">
    <value>The link for password recovery has been successfully sent to your email.</value>
  </data>
  <data name="Account_ForgotPasswordHint" xml:space="preserve">
    <value>To restore the password, specify the email address to which an email will be sent with a link to set a new password.</value>
  </data>
  <data name="Common_Send" xml:space="preserve">
    <value>Send</value>
  </data>
  <data name="Account_PasswordWasSuccessfullyChanged" xml:space="preserve">
    <value>The password has been successfully changed, you can log in using the new password.</value>
  </data>
  <data name="Common_Edit" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="Common_Remove" xml:space="preserve">
    <value>Remove</value>
  </data>
  <data name="Characters_EditCharacter" xml:space="preserve">
    <value>Edit character</value>
  </data>
  <data name="Common_Save" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="Common_Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="Characters_Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="Character_Backstory" xml:space="preserve">
    <value>Backstory</value>
  </data>
  <data name="Problem_UnknownError" xml:space="preserve">
    <value>Unknown error occured.</value>
  </data>
  <data name="Problem_DuplicateUserName" xml:space="preserve">
    <value>Such email already taken.</value>
  </data>
  <data name="Problem_PasswordRequiresNonAlphanumeric" xml:space="preserve">
    <value>Passwords must have at least one non alphanumeric character.</value>
  </data>
  <data name="Problem_PasswordRequiresDigit" xml:space="preserve">
    <value>Passwords must have at least one digit ('0'-'9').</value>
  </data>
  <data name="Problem_PasswordRequiresLower" xml:space="preserve">
    <value>Passwords must have at least one lowercase ('a'-'z').</value>
  </data>
  <data name="Problem_PasswordRequiresUpper" xml:space="preserve">
    <value>Passwords must have at least one uppercase ('A'-'Z').</value>
  </data>
  <data name="Problem_InvalidCredentials" xml:space="preserve">
    <value>Wrong email or password.</value>
  </data>
  <data name="Common_LoadingThreeDot" xml:space="preserve">
    <value>Loading...</value>
  </data>
  <data name="Tab_Home" xml:space="preserve">
    <value>Home</value>
  </data>
  <data name="Characters_Level" xml:space="preserve">
    <value>Level</value>
  </data>
  <data name="Character" xml:space="preserve">
    <value>Character</value>
  </data>
  <data name="Character_Inventory" xml:space="preserve">
    <value>Inventory</value>
  </data>
  <data name="Character_Abilities" xml:space="preserve">
    <value>Abilities</value>
  </data>
  <data name="Character_Details" xml:space="preserve">
    <value>Details</value>
  </data>
  <data name="Characters_Experience" xml:space="preserve">
    <value>Experience</value>
  </data>
  <data name="Common_Yes" xml:space="preserve">
    <value>Yes</value>
  </data>
  <data name="Common_No" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="Common_Ok" xml:space="preserve">
    <value>Ok</value>
  </data>
  <data name="Common_Clear" xml:space="preserve">
    <value>Clear</value>
  </data>
  <data name="Problem_UserNotFound" xml:space="preserve">
    <value>User not found.</value>
  </data>
  <data name="Problem_InvalidToken" xml:space="preserve">
    <value>Invalid token.</value>
    <comment>IdentityResult</comment>
  </data>
  <data name="Characters_Health" xml:space="preserve">
    <value>Health</value>
  </data>
  <data name="Abilities_Effects" xml:space="preserve">
    <value>Effects</value>
  </data>
  <data name="Abilities_Activation" xml:space="preserve">
    <value>Activation</value>
  </data>
  <data name="Common_Open" xml:space="preserve">
    <value>Open</value>
  </data>
  <data name="Common_Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="Common_Description" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="Effect_DamageEffect" xml:space="preserve">
    <value>Damage</value>
  </data>
  <data name="Effect_DamageHint" xml:space="preserve">
    <value>Each time you use your ability, roll a set of dice, which you specify below, to determine how much damage the ability has done.</value>
  </data>
  <data name="Abilities_AbilityCost" xml:space="preserve">
    <value>Ability cost</value>
  </data>
  <data name="Abilities_NotEnoughExpForAbility" xml:space="preserve">
    <value>Not enough EXP for ability.</value>
  </data>
  <data name="Common_Warning" xml:space="preserve">
    <value>Warning!</value>
  </data>
  <data name="Abilities_ActionPoints" xml:space="preserve">
    <value>Action points</value>
  </data>
  <data name="Abilities_Cooldown" xml:space="preserve">
    <value>Cooldown</value>
  </data>
  <data name="Abilities_ActivationTriggers" xml:space="preserve">
    <value>Triggers</value>
  </data>
  <data name="Abilities_ActionPointsHint" xml:space="preserve">
    <value>Almost any ability is used by spending action points. The more action points an ability spends, the cheaper it will be in experience points.</value>
  </data>
  <data name="Abilities_CooldownHint" xml:space="preserve">
    <value>Specify how many uses per day are availiable for ability.</value>
  </data>
  <data name="Abilities_EnableCooldown" xml:space="preserve">
    <value>Enable cooldown</value>
  </data>
  <data name="Abilities_EnableCooldownText" xml:space="preserve">
    <value>The number of uses per day is limited.</value>
  </data>
  <data name="Abilities_UsesCount" xml:space="preserve">
    <value>Uses count</value>
  </data>
  <data name="Abilities_TriggersHint" xml:space="preserve">
    <value>An ability can be activated automatically if you add activation triggers. A activation trigger is an event that must occur for an ability to activate without spending action points. With each added trigger the ability will became more expensive.</value>
  </data>
  <data name="Common_Add" xml:space="preserve">
    <value>Add</value>
  </data>
  <data name="Abilities_TriggerProbability" xml:space="preserve">
    <value>Trigger probability</value>
  </data>
  <data name="ETriggerProbability_Low" xml:space="preserve">
    <value>Low probability</value>
  </data>
  <data name="ETriggerProbability_Medium" xml:space="preserve">
    <value>Medium probability</value>
  </data>
  <data name="ETriggerProbability_High" xml:space="preserve">
    <value>High probability</value>
  </data>
  <data name="Abilities_ActivationTrigger" xml:space="preserve">
    <value>Activation trigger</value>
  </data>
  <data name="Abilities_Trigger" xml:space="preserve">
    <value>Trigger</value>
  </data>
  <data name="Abilities_EnterTriggerHint_Low" xml:space="preserve">
    <value>Enter low probability trigger, like «character was attaced by undead».</value>
  </data>
  <data name="Abilities_EnterTriggerHint_Medium" xml:space="preserve">
    <value>Enter medium probability trigger, like «character was attaced from range».</value>
  </data>
  <data name="Abilities_EnterTriggerHint_High" xml:space="preserve">
    <value>Enter high probability trigger, like «character takes damage».</value>
  </data>
</root>