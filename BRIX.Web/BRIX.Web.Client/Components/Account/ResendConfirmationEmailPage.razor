@page "/resend-confirmation-email"

@using System.ComponentModel.DataAnnotations
@using BRIX.Web.Client.Components.Shared

<div class="section">
    <div class="container is-max-tablet">
        <EditForm Model="_model" OnValidSubmit="ResendEmail" class="box block">
            <DataAnnotationsValidator />

            <h1 class="title">@Localization[nameof(Resource.Account_ResendConfirmationEmail)]</h1>

            <ValidationSummary class="notification block is-danger" />

            <div class="notification block">
                @Localization[Resource.Account_ResendConfirmationEmailHint]
            </div>

            @if(_showTooOften)
            {
                <div class="notification is-warning block">
                    @Localization[Resource.Account_TooOftenResendRequest]
                </div>
            }

            <Field 
                InputType="email"
                Label="@Localization[nameof(Resource.Account_Email)]"
                @bind-Value="_model.Email" />

            <div class="columns is-vcentered">
                <div class="column">
                    <Timer 
                        OnElapsedDelegate="HandleTimer"
                        FormatString="@Localization[nameof(Resource.Account_YouCanResendAfter)]"
                        HideAfterElapsed="true"
                        ShowBeforeStart="false"
                        @ref="_timer" />
                </div>
                <div class="column is-narrow">
                    <div class="buttons is-right">
                        <button type="submit" class="button is-primary @_buttonBusyClass">
                            @Localization[nameof(Resource.Account_ResendConfirmationEmail)]
                        </button>
                    </div>
                </div>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private ResendEmailModel _model = new();

    private BRIX.Web.Client.Components.Shared.Timer? _timer;

    private bool _buttonIsBusy = false;
    private bool _showTooOften = false;

    private string _buttonBusyClass => _buttonIsBusy ? "is-loading" : "";

    private async Task ResendEmail()
    {
        ResendEmailConfirmationResult result = await AuthService.ResendConfirmationEmail(_model.Email);

        if(result.Successfull)
        {
            Modal.PushNotification(
                ENotificationType.Success,
                Localization[Resource.Account_ResendConfirmationSucceeded]);
        }

        _buttonIsBusy = result.RetryAfterInSeconds > 0;
        _showTooOften = result.RetryAfterInSeconds > 0;

        if (result.RetryAfterInSeconds > 0)
        {
            if (_timer is not null)
            {
                _timer.Start(result.RetryAfterInSeconds);
            }
        }
    }

    private class ResendEmailModel
    {
        [Required(ErrorMessageResourceName = nameof(Resource.Validation_EmailRequired), 
            ErrorMessageResourceType = typeof(Resource))]
        [EmailAddress(ErrorMessageResourceName = nameof(Resource.Validation_EmailFormat), 
            ErrorMessageResourceType = typeof(Resource))]
        public string Email { get; set; } = string.Empty;
    }

    private void HandleTimer()
    {
        _buttonIsBusy = false;
        StateHasChanged();
    }
}
