@page "/reset-password"
@using System.ComponentModel.DataAnnotations

<h3>Reset Password Page</h3>
<p>Чтобы восстановить пароль, укажите эмейл, на который будет выслано письмо со ссылкой для установки нового пароля.</p>

<EditForm Model="@_resetPasswordModel" OnValidSubmit="@Send">
    <DataAnnotationsValidator />

    <label>Password</label>
    <InputText type="password" @bind-Value="_resetPasswordModel.Password" />
    <ValidationMessage For="@(() => _resetPasswordModel.Password)" />

    <label>Confirm Password</label>
    <InputText type="password" @bind-Value="_resetPasswordModel.ConfirmPassword" />
    <ValidationMessage For="@(() => _resetPasswordModel.ConfirmPassword)" />

    <button type="submit" class="button">Submit</button>
</EditForm>

@code {
    [SupplyParameterFromQuery(Name = "id")]
    public string UserId { get; set; } = string.Empty;

    [SupplyParameterFromQuery(Name = "code")]
    public string Token { get; set; } = string.Empty;

    private ResetPasswordModel _resetPasswordModel = new();

    private async Task Send()
    {
        await AuthService.ResetPassword(UserId, _resetPasswordModel.Password, Token);
    }

    public class ResetPasswordModel
    {
        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = string.Empty;

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}
