@page "/reset-password"

@using System.ComponentModel.DataAnnotations

<div class="section">
    <div class="container is-max-tablet">
        <EditForm Model="@_model" OnValidSubmit="@Send" class="box block">

            <h1 class="title">@Localization[nameof(Resource.Account_ResetPassword)]</h1>

            @if (_showSuccess)
            {
                <p class="block">@Localization[nameof(Resource.Account_PasswordWasSuccessfullyChanged)]</p>
                <button class="button block" @onclick="GoToSignIn">
                    @Localization[nameof(Resource.Account_SignIn)]
                </button>
            }
            else
            {
                <DataAnnotationsValidator />
                <ValidationSummary class="notification block is-danger" />

                <p class="block">@Localization[nameof(Resource.Account_ForgotPasswordHint)]</p>

                <TextField 
                    InputType="password"
                        Label="@Localization[nameof(Resource.Account_Password)]"
                    @bind-Value="_model.Password" />

                <TextField 
                    InputType="password"
                    Label="@Localization[nameof(Resource.Account_ConfirmPassword)]"
                    @bind-Value="_model.ConfirmPassword" />

                <div class="buttons is-justify-content-right">
                    <button type="submit" class="button">@Localization[nameof(Resource.Account_ChangePassword)]</button>
                </div>
            }
        </EditForm>
    </div>
</div>

@code {
    [SupplyParameterFromQuery(Name = "id")]
    public string UserId { get; set; } = string.Empty;

    [SupplyParameterFromQuery(Name = "code")]
    public string Token { get; set; } = string.Empty;

    private ResetPasswordModel _model = new();

    private bool _showSuccess = false;

    private async Task Send()
    {
        OperationResult result = await AuthService.ResetPassword(UserId, _model.Password, Token);

        if (result.Successfull)
        {
            _showSuccess = true;
        }
    }

    private void GoToSignIn(MouseEventArgs e)
    {
        NavigationManager.NavigateTo("/sign-in");
    }

    public class ResetPasswordModel
    {
        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = string.Empty;

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}
