@page "/sign-in"

<div class="section">
    <div class="container is-max-tablet">
        <EditForm Model="loginModel" OnValidSubmit="HandleLogin" class="box block">
            <DataAnnotationsValidator />

            <h1 class="title">@Localization[nameof(Resource.Account_SignIn)]</h1>

            <ValidationSummary class="notification block is-danger"/>

            @if (Confirmed == true)
            {
                <div class="notification is-success">@Localization[nameof(Resource.Account_ConfirmedSuccessfully)]</div>
            }
            else if (Confirmed == false)
            {
                <div class="notification is-danger">@Localization[nameof(Resource.Account_ConfirmFailed)]</div>
            }

            @if (ShowFailedLoginMessage)
            {
                <div class="notification is-danger">@Localization[nameof(Resource.Account_SignInFailed)]</div>
            }

            <div class="field">
                <label class="label">@Localization[nameof(Resource.Account_Email)]</label>
                <div class="control">
                    <InputText class="input" type="email" placeholder="address@example.com" @bind-Value="loginModel.Email" />
                </div>
            </div>

            <div class="field">
                <label class="label">@Localization[nameof(Resource.Account_Password)]</label>
                <div class="control">
                    <InputText class="input" type="password" placeholder="********" @bind-Value="loginModel.Password" />
                </div>
            </div>

            <button type="submit" class="button is-primary">@Localization[nameof(Resource.Account_SignInAction)]</button>
            <button class="button" @onclick="ForgotPassword">@Localization[nameof(Resource.Account_ForgotPassword)]</button>
        </EditForm>
    </div>
</div>

@code {

    [SupplyParameterFromQuery]
    private bool? Confirmed { get; set; }

    private SignInModel loginModel = new SignInModel();
    private bool ShowFailedLoginMessage;

    private async Task HandleLogin()
    {
        ShowFailedLoginMessage = false;

        SignInResponse result = await AuthService.SignIn(loginModel.ToDto());

        if (result.Successful)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            ShowFailedLoginMessage = true;
        }
    }
    private void ForgotPassword(MouseEventArgs e)
    {
        Navigation.NavigateTo("/forgot-password");
    }
}