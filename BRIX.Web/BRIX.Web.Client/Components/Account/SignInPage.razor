@page "/sign-in"

<div class="section">
    <div class="container is-max-tablet">
        <EditForm Model="loginModel" OnValidSubmit="HandleLogin" class="box block">
            <DataAnnotationsValidator />

            <h1 class="title">@Localization[nameof(Resource.Account_SignIn)]</h1>

            <ValidationSummary class="notification block is-danger"/>

            @if(NeedConfirm == true)
            {
                <div class="notification block is-warning">
                    <p class="block">@Localization[nameof(Resource.Account_ConfirmationEmailWasSent)]</p>
                    <button class="button is-outlined block" @onclick="GoToResend">
                        @Localization[nameof(Resource.Account_IDidntRecieveEmail)]
                    </button>
                </div>
            }

            <div class="field">
                <label class="label">@Localization[nameof(Resource.Account_Email)]</label>
                <div class="control">
                    <InputText class="input" type="email" placeholder="address@example.com" @bind-Value="loginModel.Email" />
                </div>
            </div>

            <div class="field">
                <label class="label">@Localization[nameof(Resource.Account_Password)]</label>
                <div class="control">
                    <InputText class="input" type="password" placeholder="********" @bind-Value="loginModel.Password" />
                </div>
            </div>

            <div class="buttons is-justify-content-right">
                <button type="submit" class="button is-primary">
                    @Localization[nameof(Resource.Account_SignInAction)]
                </button>
                <button class="button" @onclick="ForgotPassword">
                    @Localization[nameof(Resource.Account_ForgotPassword)]
                </button>
            </div>
        </EditForm>
    </div>
</div>

@code {

    /// <summary>
    /// Результат подтверждения аккаунта после прохождения по ссылке в письме. 
    /// Параметр формируется на сервере.
    /// </summary>
    [SupplyParameterFromQuery]
    private bool? Confirmed { get; set; }

    /// <summary>
    /// Отобразить сообщение о том, что пользователю направлено письмо со ссылкой для подтверждения аккаунта.
    /// Параметр формируется на клиенте на странице регистрации.
    /// </summary>
    [SupplyParameterFromQuery]
    private bool? NeedConfirm { get; set; }

    private SignInModel loginModel = new SignInModel();

    private async Task HandleLogin()
    {
        NeedConfirm = null;
        SignInResult result = await AuthService.SignIn(loginModel.ToDto());

        if (result.Successfull)
        {
            NavigationManager.NavigateTo("/");
        }
        else if(result.NeedToConfirmAccount)
        {
            NeedConfirm = true;
        }
    }

    private void GoToResend(MouseEventArgs e) => NavigationManager.NavigateTo("/resend-confirmation-email");

    private void ForgotPassword(MouseEventArgs e) => Navigation.NavigateTo("/forgot-password");

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if(Confirmed == true)
        {
           Modal.PushNotification(
               ENotificationType.Success,
               Localization[nameof(Resource.Account_ConfirmedSuccessfully)]
           );
        }

        if(Confirmed == false)
        {
           Modal.PushNotification(
               ENotificationType.Error,
               Localization[nameof(Resource.Account_ConfirmFailed)]
           );
        }
    }
}