@page "/characters/{CharacterId:guid}/abilities/{AbilityId:guid}"
@page "/characters/{CharacterId:guid}/abilities/new"

<div class="section">
    @* Название и описание *@
    <div class="container box block">
        <InputText class="input" @bind-Value="Ability.Name"></InputText>
        <button @onclick="SaveAsync">@Localization[nameof(Resource.Common_Save)]</button>
        <button @onclick="Cancel">@Localization[nameof(Resource.Common_Cancel)]</button>
    </div>

    @* Активация *@
    <div class="container box block">
        <p class="title">@Localization[nameof(Resource.Abilities_Activation)]</p>
        <p class="title">
            Плейсхолдер настроек активации. Этой способности нужно Х очков активации и не требуется перезарядка.
        </p>
        <button class="button is-fullwidth" @onclick="EditActivation">@Localization[nameof(Resource.Common_Edit)]</button>
    </div>

    @* Эффекты *@
    <p class="title block">@Localization[nameof(Resource.Abilities_Effects)]</p>
    <button class="button is-large is-fullwidth block" @onclick="@(async () => AddEffect())">
        <i class="fa fa-plus-circle"></i>
    </button>
    @foreach(EffectBase effect in Ability.Effects)
    {
        <div class="container box block">
            <p class="title">GET EFFECT NAME</p>
            <button @onclick="EditEffect">@Localization[nameof(Resource.Common_Edit)]</button>
            <button @onclick="RemoveEffect">@Localization[nameof(Resource.Common_Remove)]</button>
        </div>
    }
</div>


@code {
    [Parameter]
    public Guid CharacterId { get; set; }

    [Parameter]
    public Guid? AbilityId { get; set; }

    public Ability Ability { get; set; } = new ();

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        if(CharacterManager.EditingCharacter is null)
        {
            await CharacterManager.EditCharacterAsync(CharacterId);
        }
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        Ability? ability;

        if (AbilityId is null)
        {
            ability = new();
            CharacterManager.EditingCharacter?.AddAbility(ability);
        }
        else
        {
            ability = CharacterManager.EditingCharacter?.Abilities.FirstOrDefault(x => x.Id == AbilityId);
        }

        if (ability is null)
        {
            Navigation.NavigateTo("/404");
        }
        else
        {
            Ability = ability;
            AbilityId = ability.Id;
        }
    }

    private async Task SaveAsync(MouseEventArgs e)
    {
        await CharacterManager.SaveAsync();
        Navigation.NavigateTo($"/characters/{CharacterId}/abilities");
    }

    private void Cancel(MouseEventArgs e)
    {
        Navigation.NavigateTo($"/characters/{CharacterId}/abilities");
    }

    private void AddEffect()
    {

    }

    private void EditEffect(MouseEventArgs e)
    {
        throw new NotImplementedException();
    }

    private void RemoveEffect(MouseEventArgs e)
    {
        throw new NotImplementedException();
    }

    private void EditActivation(MouseEventArgs e)
    {
        throw new NotImplementedException();
    }
}
