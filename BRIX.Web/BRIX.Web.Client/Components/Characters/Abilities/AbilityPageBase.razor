@layout AbilityLayout

@code {
    [CascadingParameter]
    public AbilityLayout Layout { get; set; } = default!;

    [Parameter]
    public Guid CharacterId { get; set; }

    private int? _number;

    [Parameter]
    public int? AbilityNumber { get; set; }

    public Ability Ability => AbilityNumber is null ? new()
    : CharacterManager.EditingCharacter?.Abilities.ElementAtOrDefault(AbilityNumber.Value) ?? new();

    public Character Character => CharacterManager.EditingCharacter ?? new();

    protected override async Task OnInitializedAsync()
    {
        // Если персонаж для редактирования не выбран или не совпадает, то выбрать.
        if (CharacterManager.EditingCharacter is null || CharacterManager.EditingCharacter.Id != CharacterId)
        {
            await CharacterManager.EditCharacterAsync(CharacterId);
        }

        if(CharacterManager.EditingCharacter is null)
        {
            Navigation.NavigateTo("/404");

            return;
        }

        // Если айди способности в параметрах не указан, значит её нужно создать и добавить персонажу, 
        // а потом установить её айди.
        if (AbilityNumber is null)
        {
            Ability newAbility = new();
            CharacterManager.EditingCharacter?.AddAbility(newAbility);
            AbilityNumber = CharacterManager.EditingCharacter!.Abilities.IndexOf(newAbility);
        }

        if (CharacterManager.EditingCharacter?.Abilities.ElementAtOrDefault(AbilityNumber.Value) is null)
        {
            Navigation.NavigateTo("/404");

            return;
        }

        // Проставляем данные в лейауте
        Layout.AbilityNumber = AbilityNumber;
        Layout.CharacterId = CharacterId;

        Layout.Refresh();
    }

    protected override void OnParametersSet()
    {
        if (AbilityNumber is null)
        {
            if (Layout.AbilityNumber is not null)
            {
                AbilityNumber = Layout.AbilityNumber;
            }
        }
    }
}