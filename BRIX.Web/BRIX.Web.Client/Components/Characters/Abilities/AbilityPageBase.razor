@layout AbilityLayout

@code {
    [CascadingParameter]
    public AbilityLayout Layout { get; set; } = default!;

    [Parameter]
    public Guid CharacterId { get; set; }

    [Parameter]
    public Guid? AbilityId { get; set; }

    public Ability Ability => CharacterManager.EditingCharacter?.Abilities.FirstOrDefault(x => x.Id == AbilityId) ?? new();

    public Character Character => CharacterManager.EditingCharacter ?? new();

    protected override async Task OnInitializedAsync()
    {
        // Если персонаж для редактирования не выбран или не совпадает, то выбрать.
        if (CharacterManager.EditingCharacter is null || CharacterManager.EditingCharacter.Id != CharacterId)
        {
            await CharacterManager.EditCharacterAsync(CharacterId);
        }

        // Если айди способности в параметрах не указан, значит её нужно создать и добавить персонажу, 
        // а потом установить её айди.
        if (AbilityId is null)
        {
            Ability newAbility = new();
            CharacterManager.EditingCharacter?.AddAbility(newAbility);
            AbilityId = newAbility.Id;
        }

        // Если не удалось нормально инициализироваться, то уходим в 404.
        Character? character = CharacterManager.EditingCharacter;
        Ability? ability = CharacterManager.EditingCharacter?.Abilities.FirstOrDefault(x => x.Id == AbilityId);

        if (character is null || ability is null)
        {
            Navigation.NavigateTo("/404");
        }
        else
        {
            // Проставляем данные в лейауте
            Layout.AbilityId = AbilityId;
            Layout.CharacterId = CharacterId;
            
            Layout.Refresh();
        }
    }
}
