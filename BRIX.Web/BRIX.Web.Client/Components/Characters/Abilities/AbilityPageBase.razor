@layout AbilityLayout

@code {
    [CascadingParameter]
    public AbilityLayout Layout { get; set; } = default!;

    [Parameter]
    public Guid CharacterId { get; set; }

    [Parameter]
    public int? AbilityNumber { get; set; }

    [Parameter]
    public string OwnerType { get; set; } = string.Empty;

    public Ability Ability => GetAbility();

    EAbilityOwner ownerType;

    /// <summary>
    /// Инициализация для любой страницы редактирования способности. Работает так, что пользователь даже перейдя по 
    /// адресу напрямую, например, по ссылке, спровоцирует полноценную инициализацию необходимых свойств.
    /// </summary>
    /// <returns></returns>
    public async Task InitializeAsync()
    {
        // Если персонаж для редактирования не выбран или не совпадает, то выбрать.
        if (CharacterManager.EditingCharacter is null || CharacterManager.EditingCharacter.Id != CharacterId)
        {
            await CharacterManager.EditCharacterAsync(CharacterId);
        }

        if (CharacterManager.EditingCharacter is null)
        {
            Navigation.NavigateTo("/404");

            return;
        }

        // Если айди способности в параметрах не указан, значит её нужно создать и добавить персонажу,
        // а потом установить её айди.
        if (AbilityNumber is null)
        {
            Ability newAbility = new();
            CharacterManager.EditingCharacter?.AddAbility(newAbility);
            AbilityNumber = CharacterManager.EditingCharacter!.Abilities.IndexOf(newAbility);
        }

        if (CharacterManager.EditingCharacter?.Abilities.ElementAtOrDefault(AbilityNumber.Value) is null)
        {
            Navigation.NavigateTo("/404");

            return;
        }

        // Проставляем данные в лейауте
        Layout.AbilityNumber = AbilityNumber;
        Layout.CharacterId = CharacterId;

        // Конкретная страница-наследник тоже может дополнительно что-то инициализировать, например найти по праметрам
        // из роутинга нужный эффект или аспект в способности.
        InitializeAlso();

        Layout.Refresh();
    }

    /// <summary>
    /// Дополнительная инициализация для страниц редактирования способности: аспектов, эффектов и других настроек.
    /// </summary>
    protected virtual void InitializeAlso() { }

    protected override async Task OnInitializedAsync()
    {
        RouteToAbilityOwnerMap.TryGetValue(OwnerType, out ownerType);

        // Страница подписывается на сброс по кнопке в лейауте, чтобы инициализировать всё заново, если пользователь
        // решит сбросить все изменения.
        Layout.OnReset = async () => await InitializeAsync();
        await InitializeAsync();
    }

    protected override void OnParametersSet()
    {
        if (AbilityNumber is null && Layout.AbilityNumber is not null)
        {
            AbilityNumber = Layout.AbilityNumber;
        }
    }

    private Ability GetAbility()
    {
        return ownerType switch
        {
            EAbilityOwner.Character => AbilityNumber is null
                ? new()
                : CharacterManager.EditingCharacter?.Abilities.ElementAtOrDefault(AbilityNumber.Value) ?? new(),
            _ => throw new NotImplementedException($"На странице не реализована поставка способности для {OwnerType}")
        };
    }

    public Dictionary<string, EAbilityOwner> RouteToAbilityOwnerMap => new()
    {
        {"character", EAbilityOwner.Character },
        {"npc", EAbilityOwner.Character },
        {"artifact", EAbilityOwner.Character },
    };

    public enum EAbilityOwner
    {
        Character = 0,
        NPC = 1,
        Artifact = 2
    }
}