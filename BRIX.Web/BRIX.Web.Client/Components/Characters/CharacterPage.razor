@page "/characters/{CharacterId:guid}"
@page "/characters/{CharacterId:guid}/{ActiveTab}"

<div class="section">
    <div class="container block">
        <p class="title">@Character?.Name</p>
        <p class="subtitle">@Localization[nameof(Resource.Characters_Level)] @Character?.Level</p>
    </div>
    <Tab Class="is-centered is-boxed" @ref="Tab" OnActiveTabChanged="UpdateUriBySelectedTab">
        <TabItem Title="@Localization[nameof(Resource.Character)]" @ref="CharacterTab">
            <MainSection Character="Character" OnCharacterChanged="StateHasChanged"/>
        </TabItem>
        <TabItem Title="@Localization[nameof(Resource.Character_Abilities)]" @ref="AbilitiesTab" Tag="abilities">
            <AbilitiesSection Character="Character" />
        </TabItem>
        <TabItem Title="@Localization[nameof(Resource.Character_Inventory)]" @ref="InventoryTab" Tag="inventory">
            <div class="notification">
                <p>Основная информация о персонаже.</p>
            </div>
        </TabItem>
        <TabItem Title="@Localization[nameof(Resource.Character_Details)]" @ref="DetailsTab" Tag="details">
            <div class="notification">
                <p>Детальная информация о персонаже.</p>
            </div>
        </TabItem>
    </Tab>
</div>

@code {
    [Parameter]
    public Guid CharacterId { get; set; }

    [Parameter]
    public string? ActiveTab { get; set; }

    public Character? Character { get; set; } = default!;

    private Tab Tab { get; set; } = default!;
    private TabItem CharacterTab { get; set; } = default!;
    private TabItem AbilitiesTab { get; set; } = default!;
    private TabItem InventoryTab { get; set; } = default!;
    private TabItem DetailsTab { get; set; } = default!;
    private List<TabItem> TabItems => [CharacterTab, AbilitiesTab, InventoryTab, DetailsTab];

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        Character = await CharacterManager.GetAsync(CharacterId);

        if(Character is null)
        {
            Navigation.NavigateTo("/404");
        }
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if(ActiveTab is not null)
        {
            TabItem? tabItemToActivate = TabItems.FirstOrDefault(x => x.Tag == ActiveTab);

            if(tabItemToActivate is not null)
            {
                Tab.ActivateItem(tabItemToActivate);
            }
        }
    }

    private void UpdateUriBySelectedTab(TabItem tab)
    {
        Navigation.NavigateTo($"/characters/{CharacterId}/{tab.Tag}");
    }
}
