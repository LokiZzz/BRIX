@page "/"
@using BRIX.Library.DiceValue
@using BRIX.Web.Client.Components.Shared

<PageTitle>@Localization[nameof(Resource.Tab_Home)]</PageTitle>

<div class="section">
    <div class="block columns">
        <div class="column">
            <h1 class="title">Разные виды полей</h1>
            <Field Label="Универсальное поле с текстом" @bind-Value="textFieldValue"/>
            <Field Label="Универсальное поле с числом" @bind-Value="integerFieldValue" />
            <Field Label="Универсальное поле с дробью" @bind-Value="doubleFieldValue" />
            <Field Label="Название" Placeholder="Способность 1" @bind-Value="textFieldValue" />
            <TextAreaField Label="Описание" Placeholder="Какой-то текст c ограничением в 200 символов..." @bind-Value="textAreaFieldValue" MaxLength="200" />
            <TextAreaField Label="Второе описание" Placeholder="Какой-то текст без ограничений..."/>
            <DiceField Placeholder="Урон" @bind-Dice="dicePool" />
            <Toggle @bind-Value="booleanField" Label="Поле с флагом" Text="Хотите ли вы установить занчение этого флага в значение True? Если установите, то соответствующее поле будет иметь именно это значение."/>
            <div class="box block">
                <p>Значение в поле с текстом: @textFieldValue</p>
                <p>Значение в поле c дайсами: @(dicePool?.ToString())</p>
                <p>Значение в поле c целым: @(integerFieldValue.ToString())</p>
                <p>Значение в поле c дробным: @(doubleFieldValue.ToString())</p>
                <p>Значение в поле c флагом: @(booleanField.ToString())</p>
            </div>
        </div>
    </div>

    <div class="block">
        <h1 class="title">Вызов алерта!</h1>
        <p class="block">Результат алерта: «@alertResult»</p>
        <p class="block">Результат нумерика: «@valueChangedByNumeric.ToString()»</p>
        <button class="button" @onclick="AlertYesNo">Да / Нет</button>
        <button class="button" @onclick="AlertOk">Ok</button>
        <button class="button" @onclick="Numeric">Нумерик</button>
        <button class="button" @onclick="@(() => PushNotic(ENotificationType.Info))">Запушить Инфо</button>
        <button class="button" @onclick="@(() => PushNotic(ENotificationType.Success))">Запушить Успех</button>
        <button class="button" @onclick="@(() => PushNotic(ENotificationType.Warning))">Запушить Предупреждение</button>
        <button class="button" @onclick="@(() => PushNotic(ENotificationType.Error))">Запушить Ошибку</button>
    </div>

    <div class="block">
        <h1 class="title">Тест тупилки и исключений</h1>
        <button class="button" @onclick="ThrowException">
            <span class="fas fa-warning mr-2"></span>Затупить!
        </button>
    </div>

    <div class="block">
        <h1 class="title">Выпадающий список</h1>
        <p class="block">Выбранное значение: «@SelectedDropdownItem?.SomeProperty»</p>
        <Dropdown 
        Items="DropdownItems"
        @bind-Selected="SelectedDropdownItem"
        DisplayPropertyDelegate="x => x?.SomeProperty"
        Placeholder="Please, select Guid..."/>
    </div>

    <div class="block">
        <h1 class="title">Заголовок</h1>
        <p class="subtitle">Подзаголовок</p>
        <p>Параграф с текстом! Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
    </div>
</div>

@code
{
    private string textFieldValue = "Text field value";
    private string textAreaFieldValue = "Text field value that was set by @code, code is pretty long.";
    private string alertResult = string.Empty;
    private int valueChangedByNumeric = 55;
    private DicePool dicePool = new(2, (2, 6));
    private int integerFieldValue = 3;
    private double doubleFieldValue = 35.76;
    private bool booleanField = true;

    private DropdownItem SelectedDropdownItem { get; set; } = default!;

    private List<DropdownItem?> DropdownItems { get; set; }
        = [new DropdownItem(), new DropdownItem(), new DropdownItem()];

    public class DropdownItem
    {
        public string SomeProperty { get; set; } = Guid.NewGuid().ToString();
    }

    private async Task ThrowException(MouseEventArgs e)
    {
        Modal.IsBusy = true;
        await Task.Delay(2000);

        throw new Exception("Исключение!");
    }

    private void AlertYesNo(MouseEventArgs e)
    {
        Modal.Alert(new AlertParameters {  
            Title = "Заголовок",
            Message = "Сообщение алерта, в котором написана какая-то важная информация или вопрос, на который должен ответить пользователь. После нажатия на кнопку или после закрытия алерта будет вызван колбек с результатом алерта.",
            Mode = EAlertMode.YesNo,
            Callback = AlertCallbackHandler
        });
    }

    private void AlertOk(MouseEventArgs e)
    {
        Modal.Alert(new AlertParameters{
            Title = "Заголовок",
            Message = "Сообщение алерта, в котором написана какая-то важная информация или вопрос, на который должен ответить пользователь. После нажатия на кнопку или после закрытия алерта будет вызван колбек с результатом алерта.",
            Mode = EAlertMode.Ok,
            Callback = AlertCallbackHandler
        });
    }

    private void AlertCallbackHandler(AlertResult result)
    {
        alertResult = $"IsPositive: {result.IsPositive}; Mouse: btn{result.MouseEventArgs.Button}, x:{result.MouseEventArgs.ClientX}, y:{result.MouseEventArgs.ClientX};";
        StateHasChanged();
    }

    private void Numeric(MouseEventArgs e)
    {
        Modal.Numeric(
            new NumericParameters
            {
                Title = "Заголовок нумерика",
                Callback = NumericCallbackHandler
            }
        );
    }

    private void NumericCallbackHandler(NumericResult result)
    {
        result.ApplyAction(ref valueChangedByNumeric);
        StateHasChanged();
    }

    private void PushNotic(ENotificationType type)
    {
        Modal.PushNotification(new() { Type = type, Message = $"[{type:G}] Сообщение!!! С текстом!!!" });
    }
}