@* Компонент-селектор с вкладками, для которого элементы и соответствующие им значения указываются вручную. Каждая 
вкладка может иметь своё содержимое. Используется, например, в списке аспектов, в настройке стратегии выбора целей и в 
выборе настроек области действия.*@

@typeparam TValue

@if (Mode == EOptionsTabMode.Squares)
{
    <p class="buttons">
        @foreach (OptionsTabItem<TValue> item in Items)
        {
            <button class="button is-large @GetIsActiveTabClass(item)" @onclick="@(async () => await ActivateItemAsync(item))">
                @if (!string.IsNullOrEmpty(item.Icon))
                {
                    <span class="icon is-medium">
                        <i class="@item.Icon"></i>
                    </span>
                }
                else if (!string.IsNullOrEmpty(item.Image))
                {
                    <span class="icon is-medium">
                        <img src="@item.Image" />
                    </span>
                }
                else
                {
                    <span>@Items.IndexOf(item).ToString()</span>
                }
            </button>
        }
    </p>
}
else if (Mode == EOptionsTabMode.Stack)
{
    <div class="is-flex is-flex-direction-column is-gap-1">
        @foreach (OptionsTabItem<TValue> item in Items)
        {
            <button class="button is-justify-content-start @GetIsActiveTabClass(item)"
                    @onclick="@(async () => await ActivateItemAsync(item))">
                @item.Title
            </button>
        }
    </div>
}

<CascadingValue Value="this">
    @ChildContent
</CascadingValue>

@code {
    [Parameter]
    public EOptionsTabMode Mode { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public Action<OptionsTabItem<TValue>>? OnActiveTabChanged { get; set; }

    [Parameter]
    public TValue? SelectedValue { get; set; }

    [Parameter]
    public EventCallback<TValue?> SelectedValueChanged { get; set; }

    public OptionsTabItem<TValue> ActiveItem { get; set; } = default!;

    List<OptionsTabItem<TValue>> Items = [];

    public string _modalIsActiveClass = string.Empty;

    public void AddItem(OptionsTabItem<TValue> item)
    {
        Items.Add(item);

        if (Items.Count == 1)
        {
            ActiveItem = item;
        }

        StateHasChanged();
    }

    public async Task ActivateItemAsync(OptionsTabItem<TValue> item)
    {
        if (Items.Contains(item))
        {
            ActiveItem = item;
            SelectedValue = item.Value;
            OnActiveTabChanged?.Invoke(item);
            await SelectedValueChanged.InvokeAsync(SelectedValue);
            StateHasChanged();
        }
    }

    private string GetIsActiveTabClass(OptionsTabItem<TValue> item) => item == ActiveItem ? "is-active" : string.Empty;
}
