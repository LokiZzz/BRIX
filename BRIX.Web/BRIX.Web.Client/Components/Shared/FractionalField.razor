<div class="field">
    <label class="label">@Label</label>
    <div class="control has-icons-right">
        <input class="input @validityClass @ClassPostfix"
               type="@InputType"
               value="@Value"
               placeholder="@Placeholder"
               @oninput="OnInput" />
        <span class="icon is-small is-right">
            <i class="fas fa-percent is-danger"></i>
        </span>
    </div>
</div>

@code {
    private string validityClass = string.Empty;
    private string invalidClass = "is-danger";

    [Parameter]
    public string ClassPostfix { get; set; } = string.Empty;

    [Parameter]
    public string InputType { get; set; } = "text";

    [Parameter]
    public string Label { get; set; } = string.Empty;

    [Parameter]
    public string Placeholder { get; set; } = string.Empty;

    [Parameter]
    public double Value { get; set; }

    [Parameter]
    public EventCallback<double> ValueChanged { get; set; }

    [Parameter]
    public string? StringValue { get; set; }

    [Parameter]
    public EventCallback<string> StringValueChanged { get; set; }

    private async Task OnInput(ChangeEventArgs e)
    {
        StringValue = e?.Value?.ToString();

        if (!string.IsNullOrEmpty(StringValue))
        {
            if (double.TryParse(StringValue, out double parsed))
            {
                Value = parsed;
                await ValueChanged.InvokeAsync(Value);

                validityClass = string.Empty;
            }
            else
            {
                validityClass = invalidClass;
            }
        }

        await StringValueChanged.InvokeAsync(StringValue);
    }
}
