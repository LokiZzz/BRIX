<div class="block input-container">
    <input 
    class="input @ClassPostfix" 
    type="@InputType" 
    value="@Value" 
    @onfocus="OnFocus" 
    @onblur="OnBlur" 
    @oninput="OnInput"/>
    <label class="@labelClass">@Placeholder</label>
</div>

@code {
    private const string placeholderClass = "placeholder";
    private const string floatingClass = "placeholder floating";

    [Parameter]
    public string ClassPostfix { get; set; } = string.Empty;

    [Parameter]
    public string InputType { get; set; } = "text";

    [Parameter]
    public string Placeholder { get; set; } = string.Empty;

    [Parameter]
    public string? Value { get; set; } = string.Empty;

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    private string labelClass = placeholderClass;

    private bool isFocused = false;

    private void OnFocus()
    {
        labelClass = floatingClass;
        isFocused = true;
    }

    private void OnBlur()
    {
        if (string.IsNullOrEmpty(Value))
        {
            labelClass = placeholderClass;
        }

        isFocused = false;
    }

    private async Task OnInput(ChangeEventArgs e)
    {
        Value = e?.Value?.ToString();

        await ValueChanged.InvokeAsync(Value);
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        labelClass = string.IsNullOrEmpty(Value) && !isFocused ? placeholderClass : floatingClass;
    }
}
