@inherits AbilityPageBase

@page "/{OwnerType}/{CharacterId:guid}/abilities/{AbilityNumber:int}/activation"

<p class="title">@Localization[nameof(Resource.Abilities_Activation)]</p>

<div class="box">
    <div class="column">
        <p class="title">@Localization[nameof(Resource.Abilities_ActionPoints)]</p>
        @if (Ability.Activation.Triggers.Any() == false)
        {
            <p class="block">@Localization[nameof(Resource.Abilities_ActionPointsHint)]</p>
            <Field
            Label="@Localization[nameof(Resource.Abilities_ActionPoints)]" 
            @bind-Value="Ability.Activation.ActionPoints" @bind-Value:after="Layout.Refresh"/>
            <div class="is-display-flex is-gap-2">
                <button class="button is-fullwidth" @onclick="@(() => SetActionPoints(1))">1</button>
                <button class="button is-fullwidth" @onclick="@(() => SetActionPoints(2))">2</button>
                <button class="button is-fullwidth" @onclick="@(() => SetActionPoints(3))">3</button>
                <button class="button is-fullwidth" @onclick="@(() => SetActionPoints(4))">4</button>
                <button class="button is-fullwidth" @onclick="@(() => SetActionPoints(5))">5</button>
            </div>
        }
        else
        {
            <p class="block">@Localization[nameof(Resource.Abilities_ActionPointsTriggersExplain)]</p>
        }
    </div>

    <div class="column">
        <p class="title">@Localization[nameof(Resource.Abilities_Cooldown)]</p>
        <p class="block">@Localization[nameof(Resource.Abilities_CooldownHint)]</p>
        <Toggle 
        Label="@Localization[nameof(Resource.Abilities_EnableCooldown)]"
        Text="@Localization[nameof(Resource.Abilities_EnableCooldownText)]"
        @bind-Value="hasCooldown" 
        OnValueChanged="OnHasCooldownChanged"/>

        @if(hasCooldown)
        {
            <Field 
            Label="@Localization[nameof(Resource.Abilities_UsesCount)]" 
            @bind-Value="Ability.Activation.UsesCountPerDay" @bind-Value:after="RefreshWithCooldown"/>
        }
    </div>

    <div class="column">
        <p class="title">@Localization[nameof(Resource.Abilities_ActivationTriggers)]</p>
        <p class="block">@Localization[nameof(Resource.Abilities_TriggersHint)]</p>

        @foreach ((ETriggerProbability Probability, string Comment) trigger in Ability.Activation.Triggers)
        {
            <div class="notification">
                <button class="delete" @onclick="@(() => RemoveTrigger(trigger))"></button>
                <p>@trigger.Comment</p>
            </div>
        }

        <button class="button" @onclick="AddTrigger">@Localization[nameof(Resource.Common_Add)]</button>
    </div>
</div>

@code {
    private bool hasCooldown;
    private Toggle hasCooldownToggle = default!;

    private void SetActionPoints(int actionPoints)
    {
        Ability.Activation.ActionPoints = actionPoints;
        Layout.Refresh();
    }

    protected override void OnInitialized()
    {
        hasCooldown = Ability.Activation.HasCooldown;
    }

    private void OnHasCooldownChanged(bool hasCooldownNewValue)
    {
        hasCooldown = hasCooldownNewValue;
        Ability.Activation.UsesCountPerDay = hasCooldown ? 1 : 0;
        Layout.Refresh();
    }

    /// <summary>
    /// Спрятать поле и выключить флаг, если введён 0.
    /// </summary>
    private void RefreshWithCooldown()
    {
        if (!Ability.Activation.HasCooldown)
        {
            hasCooldown = false;
        }

        Layout.Refresh();
    }

    private void AddTrigger(MouseEventArgs args)
    {
        OptionsModalParameters parameters = new()
        {
            Title = Localization[nameof(Resource.Abilities_ActivationTriggers)],
            Callback = ApplyProbabilityAndAskText,
            Options =
            [
                new ModalOption
                {
                    Value = ETriggerProbability.High,
                    Title = Localization[nameof(Resource.ETriggerProbability_High)]
                },
                new ModalOption
                {
                    Value = ETriggerProbability.Medium,
                    Title = Localization[nameof(Resource.ETriggerProbability_Medium)]
                },
                new ModalOption
                {
                    Value = ETriggerProbability.Low,
                    Title = Localization[nameof(Resource.ETriggerProbability_Low)]
                },
            ]
        };

        Modal.Options(parameters);
    }

    private void ApplyProbabilityAndAskText(OptionsModalResult result)
    {
        if (result.SelectedItems is null || !result.SelectedItems.Any())
        {
            return;
        }

        ETriggerProbability choosedProbabilty = (ETriggerProbability)result.SelectedItems.First().Value;

        Modal.Field(
            new FieldParameters
            {
                Title = Localization[nameof(Resource.Abilities_ActivationTrigger)],
                Label = Localization[nameof(Resource.Abilities_Trigger)],
                Message = GetTriggerProbabilityHint(choosedProbabilty),
                Callback = (result) => ApplyEnteredTrigger(choosedProbabilty, result)
            }
        );
    }

    private void ApplyEnteredTrigger(ETriggerProbability probability, FieldResult fieldResult)
    {
        if (fieldResult.Result is not null)
        {
            Ability.Activation.Triggers.Add((probability, fieldResult.Result));

            if (Ability.Activation.ActionPoints != 3)
            {
                Ability.Activation.ActionPoints = 3;
            }

            Layout.Refresh();
        }
    }

    private void RemoveTrigger((ETriggerProbability Probability, string Comment) triggerToRemove)
    {
        Ability.Activation.Triggers.Remove(triggerToRemove);
        Layout.Refresh();
    }

    private string GetTriggerProbabilityHint(ETriggerProbability eTriggerProbability)
    {
        return eTriggerProbability switch
        {
            ETriggerProbability.High => Localization[nameof(Resource.Abilities_EnterTriggerHint_High)],
            ETriggerProbability.Medium => Localization[nameof(Resource.Abilities_EnterTriggerHint_Medium)],
            ETriggerProbability.Low => Localization[nameof(Resource.Abilities_EnterTriggerHint_Low)],
            _ => string.Empty
        };
    }
}