@inherits AbilityPageBase

@page "/{OwnerType}/{OwnerId:guid}/abilities/{AbilityNumber:int}"
@page "/{OwnerType}/{OwnerId:guid}/abilities/new"

@* Название и описание *@
<div class="box">
    <Field Label="@Localization[nameof(Resource.Common_Name)]" @bind-Value="Ability.Name" />
    <TextAreaField Label="@Localization[nameof(Resource.Common_Description)]" @bind-Value="Ability.Description" MaxLength="150" />
</div>

@* Активация *@
<div class="box">
    <p class="title">@Localization[nameof(Resource.Abilities_Activation)]</p>
    <LexisBlock Model="Ability.Activation" />
    <button class="button is-fullwidth" @onclick="EditActivation">@Localization[nameof(Resource.Common_Edit)]</button>
</div>

@* Эффекты *@
<p class="title">@Localization[nameof(Resource.Abilities_Effects)]</p>
<button class="button is-large is-fullwidth block" @onclick="@(async () => AddEffect())">
    <i class="fa fa-plus-circle"></i>
</button>

@foreach (EffectBase effect in Ability.Effects)
{
    <div class="box">
        <p class="title">@Localization[effect.GetType().GetLocalizedName()]</p>
        @* Если начнёт тормозить или дедлокать, то заменить на инициализацию в методе жизненного цикла компонента *@
        <p class="block">@effect.ToLexisAsync().GetAwaiter().GetResult()</p>
        <button class="button" @onclick="@(() => EditEffect(effect))">
            @Localization[nameof(Resource.Common_Edit)]
        </button>
        <button class="button is-danger" @onclick="@(() => RemoveEffect(effect))">
            @Localization[nameof(Resource.Common_Remove)]
        </button>
    </div>
}


@code {
    protected override void InitializeAlso()
    {
        base.InitializeAlso();

        if (Navigation.Uri.Contains("/abilities/new"))
        {
            Navigation.NavigateTo(
                $"/{OwnerType}/{OwnerId}/abilities/{AbilityNumber}",
                forceLoad: false,
                replace: true
            );
        }
    }

    private void AddEffect()
    {
        Navigation.NavigateToRelative($"effects");
    }

    private void EditEffect(EffectBase effect)
    {
        int effectIndex = Ability.GetEffectIndex(effect);
        string route = EffectsDictionary.GetRoute(effect);
        Navigation.NavigateToRelative($"effects/{route}/{effectIndex}");
    }

    private void RemoveEffect(EffectBase effect)
    {
        Ability.RemoveEffect(effect);
        Layout.Refresh();
    }

    private void EditActivation(MouseEventArgs e)
    {
        Navigation.NavigateToRelative("activation");
    }
}

