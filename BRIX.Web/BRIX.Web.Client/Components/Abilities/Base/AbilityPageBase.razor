@layout AbilityLayout

@code {
    [CascadingParameter]
    public AbilityLayout Layout { get; set; } = default!;

    [Parameter]
    public Guid OwnerId { get; set; }

    private EAbilityOwner ownerType;
    
    [Parameter]
    public string OwnerType { get; set; } = string.Empty;

    [Parameter]
    public int? AbilityNumber { get; set; }

    protected Ability Ability => GetAbility();

    /// <summary>
    /// Дополнительная инициализация для страниц редактирования способности: аспектов, эффектов и других настроек.
    /// </summary>
    protected virtual void InitializeAlso() { }

    protected override async Task OnInitializedAsync()
    {
        // Страница подписывается на сброс по кнопке в лейауте, чтобы инициализировать всё заново, если пользователь
        // решит сбросить все изменения.
        Layout.OnReset = async () => await InitializeAsync();
        await InitializeAsync();
    }

    protected override void OnParametersSet()
    {
        if (AbilityNumber is null && Layout.AbilityNumber is not null)
        {
            AbilityNumber = Layout.AbilityNumber;
        }
    }

    /// <summary>
    /// Инициализация для любой страницы редактирования способности. Работает так, что пользователь даже перейдя по
    /// адресу напрямую, например, по ссылке, спровоцирует полноценную инициализацию необходимых свойств.
    /// </summary>
    private async Task InitializeAsync()
    {
        RouteToAbilityOwnerMap.TryGetValue(OwnerType, out ownerType);

        int? abilityNumber = ownerType switch
        {
            EAbilityOwner.Character => await CharacterManager.EditAbility(OwnerId, AbilityNumber),
            EAbilityOwner.NPC => await NPCManager.EditAbility(OwnerId, AbilityNumber),
            _ => throw new NotImplementedException($"Не реализовано редактирование способности для {ownerType}")
        };

        // Отсюда начинается логика, которая не зависит от типа владельца способности. Это хорошо!

        if (abilityNumber is null)
        {
            Navigation.NavigateTo("/404");

            return;
        }

        // Проставляем данные в лейауте
        Layout.AbilityNumber = AbilityNumber = abilityNumber;
        Layout.OwnerType = ownerType;

        InitializeAlso();
        Layout.Refresh();
    }

    private Ability GetAbility()
    {
        return ownerType switch
        {
            EAbilityOwner.Character => AbilityNumber is null
                ? new()
                : CharacterManager.EditingCharacter?.Abilities.ElementAtOrDefault(AbilityNumber.Value) ?? new(),
            EAbilityOwner.NPC => AbilityNumber is null
                ? new()
                : NPCManager.EditingNPC?.Abilities.ElementAtOrDefault(AbilityNumber.Value) ?? new(),

            _ => throw new NotImplementedException($"На странице не реализована поставка способности для {OwnerType}")
        };
    }

    private Dictionary<string, EAbilityOwner> RouteToAbilityOwnerMap => new()
    {
        {"characters", EAbilityOwner.Character },
        {"npcs", EAbilityOwner.NPC },
        {"artifacts", EAbilityOwner.Artifact },
    };
}