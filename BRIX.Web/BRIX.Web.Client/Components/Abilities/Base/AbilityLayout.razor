@using BRIX.Web.Client.Components.Layout

@layout MainLayout
@inherits LayoutComponentBase

<CascadingValue Value="this">
    <div class="section">
        <div class="box">
            <p>Здесь будут хлебные крошки, типа:</p>
            <p>Гоблин боблин -> Способности -> Выстрел из бумпалки -> Урон -> Выбор целей</p>
        </div>

        <FooterBox>
            <Content>
                @Body
            </Content>
            <Footer>
                @if (OwnerType == EAbilityOwner.Character)
                {
                    <CharacterAbilityStats @ref="characterAbilityStats" AbilityNumber="AbilityNumber" />
                }
                @if (OwnerType == EAbilityOwner.NPC)
                {
                    <NPCAbilityStats @ref="npcAbilityStats" AbilityNumber="AbilityNumber" />
                }

                <div class="buttons is-flex is-justify-content-flex-end">
                    <button class="button" @onclick="Reset">@Localization[nameof(Resource.Common_Reset)]</button>
                    <button class="button is-primary" @onclick="SaveAsync">@Localization[nameof(Resource.Common_Save)]</button>
                </div>
            </Footer>
        </FooterBox>
    </div>
</CascadingValue>

@code {
    public EAbilityOwner OwnerType { get; set; }

    public int? AbilityNumber { get; set; }

    public Action? OnReset { get; set; }

    private NPCAbilityStats? npcAbilityStats;
    private CharacterAbilityStats? characterAbilityStats;

    private IAbilityStatsComponent? abilityStats
    {
        get
        {
            return OwnerType switch
            {
                EAbilityOwner.NPC => npcAbilityStats,
                EAbilityOwner.Character => characterAbilityStats,
                _ => null
            };
        }
    }

    /// <summary>
    /// Обновить состояние лейаута и соответствующего блока со статистикой способности.
    /// Не вызывать из OnParametersSet или OnParametersSetAsync, иначе будет stack overflow.
    /// </summary>
    public void Refresh()
    {
        StateHasChanged();
        abilityStats?.Refresh();
    }

    private async Task SaveAsync()
    {
        if (abilityStats is not null)
        {
            await abilityStats.SaveAsync();
        }
    }

    /// <summary>
    /// Сбросить все изменения, сделанные в способности.
    /// </summary>
    private void Reset()
    {
        Modal.Alert(
            new AlertParameters
            {
                Title = Localization[nameof(Resource.Common_Warning)],
                Message = Localization[nameof(Resource.Abilities_AreYouSureReset)],
                Callback = ResetInternal,
                Mode = EAlertMode.YesNo
            }
        );
    }

    private void ResetInternal(AlertResult result)
    {
        if (result.IsPositive)
        {
            abilityStats?.Reset();
            OnReset?.Invoke();
            Refresh();
        }
    }
}