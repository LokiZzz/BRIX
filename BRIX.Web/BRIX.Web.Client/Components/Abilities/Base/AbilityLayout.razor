@using BRIX.Web.Client.Components.Layout

@layout MainLayout
@inherits LayoutComponentBase

<CascadingValue Value="this">
    <div class="section ability-layout-container">
        <div class="box">
            <p>Здесь будут хлебные крошки, типа:</p>
            <p>Гоблин боблин -> Способности -> Выстрел из бумпалки -> Урон -> Выбор целей</p>
        </div>

        <div class="ability-layout-content">
            @Body
        </div>

        <footer class="box cost-footer">
            @if (OwnerType == EAbilityOwner.Character)
            {
                <CharacterAbilityStats @ref="characterAbilityStats" AbilityNumber="AbilityNumber"/>
            }
            <div class="buttons is-flex is-justify-content-flex-end">
                <button class="button" @onclick="Reset">@Localization[nameof(Resource.Common_Reset)]</button>
                <button class="button is-primary" @onclick="SaveAsync">@Localization[nameof(Resource.Common_Save)]</button>
            </div>
        </footer>
    </div>
</CascadingValue>

@code {
    public Guid OwnerId { get; set; }

    public EAbilityOwner OwnerType { get; set; }

    public int? AbilityNumber { get; set; }

    public Action? OnReset { get; set; }

    private CharacterAbilityStats? characterAbilityStats;

    /// <summary>
    /// Обновить состояние лейаута и соответствующего блока со статистикой способности.
    /// Не вызывать из OnParametersSet или OnParametersSetAsync, иначе будет stack overflow.
    /// </summary>
    public void Refresh()
    {
        StateHasChanged();
        characterAbilityStats?.Refresh();
    }

    private async Task SaveAsync()
    {
        switch(OwnerType)
        {
            case EAbilityOwner.Character:
                await SaveForCharacterAsync();
                break;
            case EAbilityOwner.NPC:
                await SaveForNPCAsync();
                break;
        }
    }

    private async Task SaveForCharacterAsync()
    {
        if (CharacterManager.EditingCharacter?.AvailableExp > 0)
        {
            await CharacterManager.SaveAsync();
            Navigation.NavigateTo($"/characters/{OwnerId}/abilities");
        }
        else
        {
            Modal.Alert(new AlertParameters
            {
                Mode = EAlertMode.Ok,
                Message = Localization[nameof(Resource.Abilities_NotEnoughExpForAbility)],
                Title = Localization[nameof(Resource.Common_Warning)],
            });
        }
    }

    private async Task SaveForNPCAsync()
    {
        await NPCManager.SaveAsync();
        Navigation.NavigateTo($"/npcs/{OwnerId}/abilities");
    }

    /// <summary>
    /// Сбросить все изменения, сделанные в способности.
    /// </summary>
    private void Reset()
    {
        Modal.Alert(
            new AlertParameters
            {
                Title = Localization[nameof(Resource.Common_Warning)],
                Message = Localization[nameof(Resource.Abilities_AreYouSureReset)],
                Callback = ResetInternal,
                Mode = EAlertMode.YesNo
            }
        );
    }

    private void ResetInternal(AlertResult result)
    {
        if (result.IsPositive)
        {
            CharacterManager.Reset();
            OnReset?.Invoke();
            StateHasChanged();
        }
    }
}