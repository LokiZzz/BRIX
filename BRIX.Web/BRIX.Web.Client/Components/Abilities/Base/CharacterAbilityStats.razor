@implements IAbilityStatsComponent

<div class="is-flex is-flex-direction-row is-justify-content-space-between">
    <p class="title">@Localization[nameof(Resource.Abilities_AbilityCost)]</p>
    <p class="title">@cost EXP</p>
</div>
<div class="progress-container mb-2">
    <progress class="progress is-warning" value="@(cost + alreadySpent)" max="@overall" />
    <progress class="progress is-success spent-progress" value="@alreadySpent" max="@overall" />
</div>
<div class="is-flex is-flex-direction-row is-justify-content-space-between block">
    <p>@Localization[nameof(Resource.Abilities_MonitorAlreadySpent)] @alreadySpent EXP</p>
    <p>@Localization[nameof(Resource.Abilities_MonitorAvailiable)] @availiable EXP</p>
</div>

@code {
    [Parameter]
    public int? AbilityNumber { get; set; }

    public Ability Ability => AbilityNumber is null ? new()
        : CharacterManager.EditingCharacter?.Abilities.ElementAtOrDefault(AbilityNumber.Value) ?? new();

    public void Refresh() => StateHasChanged();

    public async Task SaveAsync()
    {
        if (CharacterManager.EditingCharacter?.AvailableExp > 0)
        {
            Guid chacracterId = CharacterManager.EditingCharacter.Id;
            await CharacterManager.SaveAsync();
            Navigation.NavigateTo($"/characters/{chacracterId}/abilities");
        }
        else
        {
            Modal.Alert(new AlertParameters
            {
                Mode = EAlertMode.Ok,
                Message = Localization[nameof(Resource.Abilities_NotEnoughExpForAbility)],
                Title = Localization[nameof(Resource.Common_Warning)],
            });
        }
    }

    public void Reset()
    {
        CharacterManager.Reset();
    }

    private int cost => Ability?.ExpCost() ?? default;
    private int overall => CharacterManager.EditingCharacter?.Experience ?? default;
    private int alreadySpent => GetAlreadySpent();
    private int availiable => CharacterManager.EditingCharacter?.AvailableExp ?? default;

    private int GetAlreadySpent()
    {
        if (CharacterManager.EditingCharacter is null || Ability is null)
        {
            return default;
        }

        return CharacterManager.EditingCharacter.GetSpentExp(excludeAbilityId: Ability.Id);
    }
}