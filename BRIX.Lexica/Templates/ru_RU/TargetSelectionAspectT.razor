@using BRIX.Lexica
@using BRIX.Library.Aspects.TargetSelection
@using BRIX.Library.Enums
@using BRIX.Library.Mathematics

@if (Model.Strategy == ETargetSelectionStrategy.CharacterHimself)
{
    <p>Целью @(Model.IsConcorded ? "эффектов" : "эффекта") является сам персонаж.</p>
}
@if (Model.Strategy == ETargetSelectionStrategy.NTargetsAtDistanсeL)
{
    <p>@(Model.IsConcorded ? "Эффекты подействуют" : "Эффект подействует")  на @Numbers.RUSDcln(Model.NTAD.TargetsCount, "цель", "цели", "целей") на расстоянии @Numbers.RUSDcln(Model.NTAD.DistanceInMeters, "метр", "метра", "метров") от персонажа.</p>

    if(Model.NTAD.IsTargetSelectionIsRandom){
        <p>Цели должны быть выбраны случайным образом.</p>
    }
    else
    {
        <p>Цели выбирает сам персонаж.</p>
    }
    if (Model.NeedToSeeTarget)
    {
        <p>Персонаж должен видеть цели.</p>
    }
}
@if (Model.Strategy == ETargetSelectionStrategy.Area)
{
    <p>@(Model.IsConcorded ? "Эффекты подействуют" : "Эффект подействует") на все цели в @GetShape(Model.AreaSettings.Area.Shape) на расстоянии @Numbers.RUSDeclension(Model.AreaSettings.DistanceToAreaInMeters, "метра", "метров", "метров") от персонажа. Область действия может располагаться под любым углом относительно персонажа.</p>
    
    if(Model.AreaSettings.ExcludedTargetsCount > 0)
    {
        <p>Персонаж может выбрать @Numbers.RUSDeclension(Model.AreaSettings.ExcludedTargetsCount, "цель", "цели", "целей") в области, к которым @(Model.IsConcorded ? "эффекты применяться не будут" : "эффект применяться не будет.")</p>
    }
    if (Model.NeedToSeeTarget)
    {
        <p>Персонаж должен видеть центр области действия.</p>
    }
    if (Model.AreaSettings.SpreadsAroundCorners)
    {
        <p>Область огибает углы.</p>
    }
}
@if(Model.Strategy == ETargetSelectionStrategy.NTargetsAtDistanсeL || Model.Strategy == ETargetSelectionStrategy.Area)
{
    @if (Model.TargetChain.IsChainEnabled)
    {
        <p>Эффект применяется по цепочке к @Numbers.RUSDcln(Model.TargetChain.MaxTargetsCount, "цели", "целям", "целям"), максимальное расстояние между целями в цепи: @Numbers.RUSDcln(Model.TargetChain.MaxDistanceBetweenTargets, "метр", "метра", "метров").</p>
    }
}

@code {
    [Parameter]
    public TargetSelectionAspect Model { get; set; } = new();

    public static MarkupString GetSize(ETargetSize input)
    {
        string resultString = input switch
        {
            ETargetSize.Tiny => "Крохотный",
            ETargetSize.Miniature => "Миниатюрный",
            ETargetSize.Small => "Маленький",
            ETargetSize.Medium => "Средний",
            ETargetSize.Big => "Большой",
            ETargetSize.Huge => "Огромный",
            ETargetSize.Gigantic => "Гигантский",
            ETargetSize.Monstrous => "Монструозный",
            ETargetSize.Colossal => "Колоссальный",
            ETargetSize.Titanic => "Титанический",
            ETargetSize.Legendary => "Легендарный",
            _ => TemplateHelper.LexisTemplatingError
        };

        return (MarkupString)resultString;
    }

    public static MarkupString GetShape(IShape? shape)
    {
        if(shape == null)
        {
            return (MarkupString)TemplateHelper.LexisTemplatingError;
        }

        string resultString = shape switch
        {
            Brick brick => $"области в форме куба со сторонами {brick.A}, {brick.B} и {Numbers.RUSDcln(brick.C, "метр", "метра", "метров")}",
            Sphere sphere => $"области в форме сферы с радиусом {Numbers.RUSDcln(sphere.R, "метр", "метра", "метров")}",
            Cone cone => $"области в форме конуса с высотой {cone.H} и радиусом {Numbers.RUSDcln(cone.R, "метр", "метра", "метров")}",
            Cylinder cylinder => $"области в форме цилиндра с высотой {cylinder.H} и радиусом {Numbers.RUSDcln(cylinder.R, "метр", "метра", "метров")}",
            VoxelArray voxels => $"в области сложной формы, состоящей из {Numbers.RUSDcln(voxels.N, "вокселя", "вокселей", "вокселей")}",
            _ => TemplateHelper.LexisTemplatingError
        };

        return (MarkupString)resultString;
    }
}