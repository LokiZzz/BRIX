@using BRIX.Lexica
@using BRIX.Library.Aspects.TargetSelection
@using BRIX.Library.Enums
@using BRIX.Library.Mathematics

@if (Model.Strategy == ETargetSelectionStrategy.CharacterHimself)
{
    <p>The target of the @(Model.IsConcorded ? "effects" : "effect") is the character itself.</p>
}
@if (Model.Strategy == ETargetSelectionStrategy.NTargetsAtDistanсeL)
{
    <p>The @(Model.IsConcorded ? "effects" : "effect") will affect @Numbers.ENGDcln(Model.NTAD.TargetsCount, "target") at distance of @Numbers.ENGDcln(Model.NTAD.DistanceInMeters, "meter") from the character.</p>

    if(Model.NTAD.IsTargetSelectionIsRandom){
        <p>Targets must be selected randomly.</p>
    }
    else
    {
        <p>The character chooses the targets himself.</p>
    }

    if (Model.NeedToSeeTarget)
    {
        <p>Character must see the targets.</p>
    }
}
@if (Model.Strategy == ETargetSelectionStrategy.Area)
{
    <p>The @(Model.IsConcorded ? "effects" : "effect") will affect all targets in @GetShape(Model.AreaSettings.Area.Shape) at a distance of @Numbers.ENGDcln(Model.AreaSettings.DistanceToAreaInMeters, "meter") from the character. The area of @(Model.IsConcorded ? "effects" : "effect") can be located at any angle relative to the character.</p>
    
    if(Model.AreaSettings.ExcludedTargetsCount > 0)
    {
        <p>The character can select up to @Numbers.ENGDcln(Model.AreaSettings.ExcludedTargetsCount, "target") in area to which the @(Model.IsConcorded ? "effects" : "effect") will not be applied.</p>
    }

    if (Model.NeedToSeeTarget)
    {
        <p>Character must see the center of the area.</p>
    }
}
@if(Model.Strategy == ETargetSelectionStrategy.NTargetsAtDistanсeL || Model.Strategy == ETargetSelectionStrategy.Area)
{
    @if (Model.TargetChain.IsChainEnabled)
    {
        <p>After applying an @(Model.IsConcorded ? "effects" : "effect") to a target, it is applied along the chain up to @Numbers.ENGDcln(Model.TargetChain.MaxTargetsCount, "target"), the maximum distance between targets in the chain: @Numbers.ENGDcln(Model.TargetChain.MaxDistanceBetweenTargets, "meter").</p>
    }

    <p>The @(Model.IsConcorded ? "effects" : "effect") can be applied to targets of the following sizes:</p>
    <ul>
        @foreach (ETargetSize size in Model.TargetsSizes.AllowedTargetSizes)
        {
            <li>@GetSize(size);</li>
        }
    </ul>
}

@code {
    [Parameter]
    public TargetSelectionAspect Model { get; set; } = new();

    public static MarkupString GetSize(ETargetSize input)
    {
        return (MarkupString)input.ToString();
    }

    public static MarkupString GetShape(IShape? shape)
    {
        if(shape == null)
        {
            return (MarkupString)TemplateHelper.LexisTemplatingError;
        }

        string resultString = shape switch
        {
            Brick brick => $"cube-shaped area with sides of {brick.A}, {brick.B} and {Numbers.ENGDcln(brick.C, "meter")}",
            Sphere sphere => $"sphere-shaped area with radius of {Numbers.ENGDcln(sphere.R, "meter")}",
            Cone cone => $"cone-shaped area with height of {cone.H} and radius of {Numbers.ENGDcln(cone.R, "meter")}",
            Cylinder cylinder => $"cylinder-shaped area with height of {cylinder.H} and radius of {Numbers.ENGDcln(cylinder.R, "meter")}",
            VoxelArray voxels => $"area of complex shape consisting of {Numbers.ENGDcln(voxels.N, "voxel")}",
            _ => TemplateHelper.LexisTemplatingError
        };

        return (MarkupString)resultString;
    }
}