@using BRIX.Lexica
@using BRIX.Library.Aspects.TargetSelection
@using BRIX.Library.Enums
@using BRIX.Library.Mathematics

@if (Model.Strategy == ETargetSelectionStrategy.CharacterHimself)
{
    <text>TSA: self;</text>
}
@if (Model.Strategy == ETargetSelectionStrategy.NTargetsAtDistanсeL)
{
    <text>NTAD: @Model.NTAD.TargetsCount at @Model.NTAD.DistanceInMeters m;</text>

    @if(Model.NTAD.IsTargetSelectionIsRandom)
    {
        <text> Random: @Model.NTAD.IsTargetSelectionIsRandom;</text>
    }
}
@if (Model.Strategy == ETargetSelectionStrategy.Area)
{
    <text>AREA: @Model.AreaSettings.Area.Shape.ToString() at @Model.AreaSettings.DistanceToAreaInMeters m; Exclude: @Model.AreaSettings.ExcludedTargetsCount;</text>
}
@if(Model.Strategy == ETargetSelectionStrategy.NTargetsAtDistanсeL || Model.Strategy == ETargetSelectionStrategy.Area)
{
    @if (Model.TargetChain.IsChainEnabled)
    {
        <text> Chain: @Model.TargetChain.MaxTargetsCount with @Model.TargetChain.MaxDistanceBetweenTargets m;</text>
    }

    <text> Sizes: @Model.TargetsSizes.AllowedTargetSizes.ToAggregatedString(x => x.ToString());</text>

    @if (Model.NeedToSeeTarget)
    {
        <text> NeedToSeeTargetOrCenter;</text>
    }
}

@code {
    [Parameter]
    public TargetSelectionAspect Model { get; set; } = new();
}